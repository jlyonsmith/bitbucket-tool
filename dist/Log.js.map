{"version":3,"sources":["../src/Log.js"],"names":["Log","autobind","constructor","container","readline","stdout","process","stderr","setInterval","clearInterval","spinnerDelay","spinnerHandle","info","args","stopSpinner","write","join","os","EOL","warning","chalk","yellow","error","red","startSpinner","line","index","spinnerTick","clearLine","cursorTo","spinnerChars","spinnerTitle","length","restartSpinner","stopSpinnerNoMessage","green"],"mappings":"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","sourcesContent":["import readline from \"readline\"\nimport chalk from \"chalk\"\nimport autobind from \"autobind-decorator\"\nimport os from \"os\"\n\n@autobind\nexport class Log {\n  static spinnerChars = \"⠄⠆⠇⠋⠙⠸⠰⠠⠰⠸⠙⠋⠇⠆\"\n\n  constructor(container = {}) {\n    this.readline = container.readline ?? readline\n    this.stdout = container.stdout ?? process.stdout\n    this.stderr = container.stderr ?? process.stderr\n    this.setInterval = container.setInterval ?? setInterval\n    this.clearInterval = container.setInterval ?? clearInterval\n    this.spinnerDelay = container.spinnerDelay ?? 250\n    this.spinnerHandle = null\n  }\n\n  info(...args) {\n    this.stopSpinner()\n    this.stderr.write(args.join(\" \") + os.EOL)\n  }\n\n  warning(...args) {\n    this.stopSpinner()\n    this.stderr.write(chalk.yellow(\"warning:\", args.join(\" \")) + os.EOL)\n  }\n\n  error(...args) {\n    this.stopSpinner()\n    this.stderr.write(chalk.red(\"error:\", args.join(\" \")) + os.EOL)\n  }\n\n  startSpinner(line) {\n    if (this.spinnerHandle !== null) {\n      this.stopSpinner()\n    }\n\n    let index = 0\n\n    const spinnerTick = () => {\n      this.readline.clearLine(this.stdout, 0)\n      this.readline.cursorTo(this.stdout, 0)\n      this.stdout.write(Log.spinnerChars[index] + \" \" + this.spinnerTitle)\n\n      index = (index + 1) % Log.spinnerChars.length\n    }\n\n    this.spinnerTitle = line\n    this.spinnerHandle = this.setInterval(spinnerTick, this.spinnerDelay)\n\n    spinnerTick()\n  }\n\n  restartSpinner() {\n    this.startSpinner(this.spinnerTitle)\n  }\n\n  stopSpinnerNoMessage() {\n    if (this.spinnerHandle !== null) {\n      this.clearInterval(this.spinnerHandle)\n      this.spinnerHandle = null\n      this.readline.clearLine(this.stdout, 0)\n      this.readline.cursorTo(this.stdout, 0)\n      return true\n    } else {\n      return false\n    }\n  }\n\n  stopSpinner() {\n    if (this.stopSpinnerNoMessage()) {\n      this.stdout.write(chalk.green(\"✔︎ \") + this.spinnerTitle + os.EOL)\n    }\n  }\n}\n"],"file":"Log.js"}