{"version":3,"sources":["../src/GitExtraTool.js"],"names":["streamToString","readable","stream","Readable","toString","Promise","resolve","reject","string","on","buffer","read","error","pipe","writeable","execAsync","cp","exec","GitExtraTool","autobind","constructor","toolName","log","options","debug","ensureCommands","cmds","Set","newCmds","filter","cmd","has","exists","all","map","forEach","Error","add","getRemotes","result","output","stdout","re","RegExp","remotes","arr","name","site","user","slug","groups","push","getBranch","branch","trim","browse","remoteName","remote","isGitHub","url","info","wait","warning","pullRequest","upstreamRemoteName","originRemote","find","upstreamRemote","run","argv","boolean","alias","r","t","default","toRemote","args","version","fullVersion","command","_","toLowerCase","subCommand","help"],"mappings":";;;;;;;AAAA;;AACA;;AACA;;AACA;;AACA;;AACA;;AACA;;AACA;;;;;;AAEA,SAASA,cAAT,CAAwBC,QAAxB,EAAkC;AAChC,MAAI,EAAEA,QAAQ,YAAYC,gBAAOC,QAA7B,CAAJ,EAA4C;AAC1C,WAAOF,QAAQ,CAACG,QAAT,EAAP;AACD;;AAED,SAAO,IAAIC,OAAJ,CAAY,CAACC,OAAD,EAAUC,MAAV,KAAqB;AACtC,QAAIC,MAAM,GAAG,EAAb;AAEAP,IAAAA,QAAQ,CAACQ,EAAT,CAAY,UAAZ,EAAyBC,MAAD,IAAY;AAClCF,MAAAA,MAAM,IAAIE,MAAM,CAACC,IAAP,GAAcP,QAAd,EAAV;AACD,KAFD;AAIAH,IAAAA,QAAQ,CAACQ,EAAT,CAAY,KAAZ,EAAmB,MAAM;AACvBH,MAAAA,OAAO,CAACE,MAAD,CAAP;AACD,KAFD;AAIAP,IAAAA,QAAQ,CAACQ,EAAT,CAAY,OAAZ,EAAsBG,KAAD,IAAW;AAC9BL,MAAAA,MAAM,CAACK,KAAD,CAAN;AACD,KAFD;AAIAX,IAAAA,QAAQ,CAACY,IAAT,CAAcC,SAAd;AACD,GAhBM,CAAP;AAiBD;;AAED,MAAMC,SAAS,GAAG,qBAAUC,uBAAGC,IAAb,CAAlB;;IAGaC,Y,OADZC,0B,WAAD,MACaD,YADb,CAC0B;AACxBE,EAAAA,WAAW,CAACC,QAAD,EAAWC,GAAX,EAAgB;AACzB,UAAMC,OAAO,GAAG,OAAOF,QAAP,KAAoB,QAApB,GAA+BA,QAA/B,GAA0C,IAA1D;;AAEA,QAAIE,OAAJ,EAAa;AACX,WAAKF,QAAL,GAAgBE,OAAO,CAACF,QAAxB;AACA,WAAKC,GAAL,GAAWC,OAAO,CAACD,GAAnB;AACA,WAAKE,KAAL,GAAaD,OAAO,CAACC,KAArB;AACD,KAJD,MAIO;AACL,WAAKH,QAAL,GAAgBA,QAAhB;AACA,WAAKC,GAAL,GAAWA,GAAX;AACD;AACF;;AAED,QAAMG,cAAN,CAAqBC,IAArB,EAA2B;AACzB,SAAKA,IAAL,GAAY,KAAKA,IAAL,IAAa,IAAIC,GAAJ,EAAzB;AAEA,UAAMC,OAAO,GAAGF,IAAI,CAACG,MAAL,CAAaC,GAAD,IAAS,CAAC,KAAKJ,IAAL,CAAUK,GAAV,CAAcD,GAAd,CAAtB,CAAhB;AACA,UAAME,MAAM,GAAG,MAAM3B,OAAO,CAAC4B,GAAR,CAAYL,OAAO,CAACM,GAAR,CAAaJ,GAAD,IAAS,4BAAcA,GAAd,CAArB,CAAZ,CAArB;AAEAF,IAAAA,OAAO,CAACO,OAAR,CAAiBL,GAAD,IAAS;AACvB,UAAI,CAAC,CAACE,MAAM,CAACF,GAAD,CAAZ,EAAmB;AACjB,cAAM,IAAIM,KAAJ,CAAW,YAAWN,GAAI,uCAA1B,CAAN;AACD,OAFD,MAEO;AACL,aAAKJ,IAAL,CAAUW,GAAV,CAAcP,GAAd;AACD;AACF,KAND;AAOD;;AAED,QAAMQ,UAAN,GAAmB;AACjB,UAAM,KAAKb,cAAL,CAAoB,CAAC,KAAD,CAApB,CAAN;AAEA,UAAMc,MAAM,GAAG,MAAMxB,SAAS,CAAC,gBAAD,CAA9B;AACA,UAAMyB,MAAM,GAAG,MAAMxC,cAAc,CAACuC,MAAM,CAACE,MAAR,CAAnC;AACA,UAAMC,EAAE,GAAG,IAAIC,MAAJ,CACT,wIADS,EAET,IAFS,CAAX;AAKA,QAAIC,OAAO,GAAG,EAAd;AACA,QAAIC,GAAG,GAAG,IAAV;;AAEA,WAAO,CAACA,GAAG,GAAGH,EAAE,CAACzB,IAAH,CAAQuB,MAAR,CAAP,MAA4B,IAAnC,EAAyC;AACvC,YAAM;AAAEM,QAAAA,IAAF;AAAQC,QAAAA,IAAR;AAAcC,QAAAA,IAAd;AAAoBC,QAAAA;AAApB,UAA6BJ,GAAG,CAACK,MAAvC;AAEAN,MAAAA,OAAO,CAACO,IAAR,CAAa;AAAEL,QAAAA,IAAF;AAAQC,QAAAA,IAAR;AAAcC,QAAAA,IAAd;AAAoBC,QAAAA;AAApB,OAAb;AACD;;AAED,WAAOL,OAAP;AACD;;AAED,QAAMQ,SAAN,GAAkB;AAChB,UAAMb,MAAM,GAAG,MAAMxB,SAAS,CAAC,iCAAD,CAA9B;AACA,UAAMsC,MAAM,GAAGrD,cAAc,CAACuC,MAAM,CAACE,MAAR,CAAd,CAA8Ba,IAA9B,EAAf;;AAEA,QAAID,MAAM,KAAK,MAAf,EAAuB;AACrBA,MAAAA,MAAM,GAAG,QAAT;AACD;;AAED,WAAOA,MAAP;AACD;;AAED,QAAME,MAAN,CAAaC,UAAb,EAAyB;AACvB,UAAMZ,OAAO,GAAG,MAAM,KAAKN,UAAL,EAAtB;AACA,UAAMe,MAAM,GAAG,MAAM,KAAKD,SAAL,EAArB;;AAEA,SAAK,MAAMK,MAAX,IAAqBb,OAArB,EAA8B;AAC5B,UAAIa,MAAM,CAACX,IAAP,KAAgBU,UAApB,EAAgC;AAC9B,cAAME,QAAQ,GAAGD,MAAM,CAACV,IAAP,KAAgB,YAAjC;AACA,YAAIY,GAAG,GAAI,WAAUF,MAAM,CAACV,IAAK,IAAGU,MAAM,CAACT,IAAK,IAAGS,MAAM,CAACR,IAAK,GAA/D;;AAEA,YAAIS,QAAJ,EAAc;AACZC,UAAAA,GAAG,IAAK,QAAON,MAAO,EAAtB;AACD,SAFD,MAEO;AACLM,UAAAA,GAAG,IAAK,UAASN,MAAO,EAAxB;AACD;;AAED,aAAK/B,GAAL,CAASsC,IAAT,CAAe,YAAWD,GAAI,MAA9B;AACA,2BAAKA,GAAL,EAAU;AAAEE,UAAAA,IAAI,EAAE;AAAR,SAAV;AACA;AACD;AACF;;AAED,SAAKvC,GAAL,CAASwC,OAAT,CAAkB,kBAAiBL,MAAO,aAA1C;AACD;;AAED,QAAMM,WAAN,CAAkB;AAAEP,IAAAA,UAAF;AAAcQ,IAAAA;AAAd,GAAlB,EAAsD;AACpD,UAAMpB,OAAO,GAAG,MAAM,KAAKN,UAAL,EAAtB;AACA,UAAMe,MAAM,GAAG,MAAM,KAAKD,SAAL,EAArB;AACA,UAAMa,YAAY,GAAGrB,OAAO,CAACsB,IAAR,CAAcT,MAAD,IAAYA,MAAM,CAACX,IAAP,KAAgBU,UAAzC,CAArB;AACA,UAAMW,cAAc,GAAGvB,OAAO,CAACsB,IAAR,CACpBT,MAAD,IAAYA,MAAM,CAACX,IAAP,KAAgBkB,kBADP,CAAvB;;AAIA,QAAI,CAACC,YAAL,EAAmB;AACjB,WAAK3C,GAAL,CAASV,KAAT,CAAgB,WAAU4C,UAAW,iBAArC;AACA;AACD;;AAED,QAAI,CAACW,cAAL,EAAqB;AACnB,WAAK7C,GAAL,CAASV,KAAT,CAAgB,kBAAiBoD,kBAAmB,iBAApD;AACA;AACD;;AAED,QAAIL,GAAJ;;AAEA,QAAIM,YAAY,CAAClB,IAAb,KAAsB,YAA1B,EAAwC;AACtC;AACAY,MAAAA,GAAG,GAAI,WAAUQ,cAAc,CAACpB,IAAK,IAAGoB,cAAc,CAACnB,IAAK,IAAGmB,cAAc,CAAClB,IAAK,YAAWI,MAAO,MAAKY,YAAY,CAACjB,IAAK,IAAGK,MAAO,EAAtI;AACD,KAHD,MAGO;AACL;AACAM,MAAAA,GAAG,GAAI,WAAUM,YAAY,CAAClB,IAAK,IAAGkB,YAAY,CAACjB,IAAK,IAAGiB,YAAY,CAAChB,IAAK,mBAA7E;AACD;;AAED,SAAK3B,GAAL,CAASsC,IAAT,CAAe,YAAWD,GAAI,MAA9B;AACA,uBAAKA,GAAL,EAAU;AAAEE,MAAAA,IAAI,EAAE;AAAR,KAAV;AACD;;AAED,QAAMO,GAAN,CAAUC,IAAV,EAAgB;AACd,UAAM9C,OAAO,GAAG;AACdf,MAAAA,MAAM,EAAE,CAAC,QAAD,EAAW,WAAX,CADM;AAEd8D,MAAAA,OAAO,EAAE,CAAC,MAAD,EAAS,SAAT,EAAoB,OAApB,CAFK;AAGdC,MAAAA,KAAK,EAAE;AACLC,QAAAA,CAAC,EAAE,QADE;AAELC,QAAAA,CAAC,EAAE;AAFE,OAHO;AAOdC,MAAAA,OAAO,EAAE;AACPjB,QAAAA,MAAM,EAAE,QADD;AAEPkB,QAAAA,QAAQ,EAAE;AAFH;AAPK,KAAhB;AAaA,UAAMC,IAAI,GAAG,uBAAUP,IAAV,EAAgB9C,OAAhB,CAAb;AAEA,SAAKC,KAAL,GAAaoD,IAAI,CAACpD,KAAlB;;AAEA,QAAIoD,IAAI,CAACC,OAAT,EAAkB;AAChB,WAAKvD,GAAL,CAASsC,IAAT,CAAe,IAAGkB,oBAAY,EAA9B;AACA,aAAO,CAAP;AACD;;AAED,QAAIC,OAAO,GAAGH,IAAI,CAACI,CAAL,CAAO,CAAP,CAAd;AAEAD,IAAAA,OAAO,GAAGA,OAAO,GAAGA,OAAO,CAACE,WAAR,EAAH,GAA2B,MAA5C;AAEA,UAAMC,UAAU,GAAGN,IAAI,CAACI,CAAL,CAAO,CAAP,CAAnB;;AAEA,YAAQD,OAAR;AACE,WAAK,cAAL;AACA,WAAK,KAAL;AAAY;AACV,YAAIH,IAAI,CAACO,IAAL,IAAa,CAACD,UAAlB,EAA8B;AAC5B,eAAK5D,GAAL,CAASsC,IAAT,CAAe,UAAS,KAAKvC,QAAS;;;;;;;;;CAAtC;AAUA,iBAAO,CAAP;AACD;;AAED,cAAM,KAAK0C,WAAL,CAAiB;AACrBP,UAAAA,UAAU,EAAEoB,IAAI,CAACnB,MADI;AAErBO,UAAAA,kBAAkB,EAAEY,IAAI,CAACD;AAFJ,SAAjB,CAAN;AAIA;;AAEF,WAAK,QAAL;AACA,WAAK,KAAL;AAAY;AACV,YAAIC,IAAI,CAACO,IAAL,IAAa,CAACD,UAAlB,EAA8B;AAC5B,eAAK5D,GAAL,CAASsC,IAAT,CAAe,UAAS,KAAKvC,QAAS;;;;;;;;CAAtC;AASA,iBAAO,CAAP;AACD;;AAED,cAAM,KAAKkC,MAAL,CAAYqB,IAAI,CAACnB,MAAjB,CAAN;AAEA;;AAEF,WAAK,MAAL;AACA;AACE,aAAKnC,GAAL,CAASsC,IAAT,CAAe;;;SAGd,KAAKvC,QAAS;;;;;;;;;;;;CAHf;AAgBA,eAAO,CAAP;AA5DJ;;AA+DA,WAAO,CAAP;AACD;;AAnNuB,C","sourcesContent":["import parseArgs from \"minimist\"\nimport { fullVersion } from \"./version\"\nimport autobind from \"autobind-decorator\"\nimport cp from \"child_process\"\nimport commandExists from \"command-exists\"\nimport stream from \"stream\"\nimport { promisify } from \"util\"\nimport open from \"open\"\n\nfunction streamToString(readable) {\n  if (!(readable instanceof stream.Readable)) {\n    return readable.toString()\n  }\n\n  return new Promise((resolve, reject) => {\n    let string = \"\"\n\n    readable.on(\"readable\", (buffer) => {\n      string += buffer.read().toString()\n    })\n\n    readable.on(\"end\", () => {\n      resolve(string)\n    })\n\n    readable.on(\"error\", (error) => {\n      reject(error)\n    })\n\n    readable.pipe(writeable)\n  })\n}\n\nconst execAsync = promisify(cp.exec)\n\n@autobind\nexport class GitExtraTool {\n  constructor(toolName, log) {\n    const options = typeof toolName === \"object\" ? toolName : null\n\n    if (options) {\n      this.toolName = options.toolName\n      this.log = options.log\n      this.debug = options.debug\n    } else {\n      this.toolName = toolName\n      this.log = log\n    }\n  }\n\n  async ensureCommands(cmds) {\n    this.cmds = this.cmds || new Set()\n\n    const newCmds = cmds.filter((cmd) => !this.cmds.has(cmd))\n    const exists = await Promise.all(newCmds.map((cmd) => commandExists(cmd)))\n\n    newCmds.forEach((cmd) => {\n      if (!!exists[cmd]) {\n        throw new Error(`Command '${cmd}' does not exist.  Please install it.`)\n      } else {\n        this.cmds.add(cmd)\n      }\n    })\n  }\n\n  async getRemotes() {\n    await this.ensureCommands([\"git\"])\n\n    const result = await execAsync(\"git remote -vv\")\n    const output = await streamToString(result.stdout)\n    const re = new RegExp(\n      \"^(?<name>[a-zA-Z0-9-]+)\\\\s+git@(?<site>bitbucket\\\\.org|github\\\\.com):(?<user>[a-zA-Z0-9-]+)/(?<slug>[a-zA-Z0-9-]+).git\\\\s+\\\\(fetch\\\\)$\",\n      \"gm\"\n    )\n\n    let remotes = []\n    let arr = null\n\n    while ((arr = re.exec(output)) !== null) {\n      const { name, site, user, slug } = arr.groups\n\n      remotes.push({ name, site, user, slug })\n    }\n\n    return remotes\n  }\n\n  async getBranch() {\n    const result = await execAsync(\"git rev-parse --abbrev-ref HEAD\")\n    const branch = streamToString(result.stdout).trim()\n\n    if (branch === \"HEAD\") {\n      branch = \"master\"\n    }\n\n    return branch\n  }\n\n  async browse(remoteName) {\n    const remotes = await this.getRemotes()\n    const branch = await this.getBranch()\n\n    for (const remote of remotes) {\n      if (remote.name === remoteName) {\n        const isGitHub = remote.site === \"github.com\"\n        let url = `https://${remote.site}/${remote.user}/${remote.slug}/`\n\n        if (isGitHub) {\n          url += `tree/${branch}`\n        } else {\n          url += `src?at=${branch}`\n        }\n\n        this.log.info(`Opening '${url}'...`)\n        open(url, { wait: false })\n        return\n      }\n    }\n\n    this.log.warning(`No git remote '${remote}' was found`)\n  }\n\n  async pullRequest({ remoteName, upstreamRemoteName }) {\n    const remotes = await this.getRemotes()\n    const branch = await this.getBranch()\n    const originRemote = remotes.find((remote) => remote.name === remoteName)\n    const upstreamRemote = remotes.find(\n      (remote) => remote.name === upstreamRemoteName\n    )\n\n    if (!originRemote) {\n      this.log.error(`Remote '${remoteName}' was not found`)\n      return\n    }\n\n    if (!upstreamRemote) {\n      this.log.error(`Target remote '${upstreamRemoteName}' was not found`)\n      return\n    }\n\n    let url\n\n    if (originRemote.site === \"github.com\") {\n      // On GitHub as of May 2020 you start a PR by do a compare operation from the upstream repository\n      url = `https://${upstreamRemote.site}/${upstreamRemote.user}/${upstreamRemote.slug}/compare/${branch}...${originRemote.user}:${branch}`\n    } else {\n      // On BitBucket as of May 2020 you start a PR by doing a compare operation from the origin or upstream repository\n      url = `https://${originRemote.site}/${originRemote.user}/${originRemote.slug}/pull-request/new`\n    }\n\n    this.log.info(`Opening '${url}'...`)\n    open(url, { wait: false })\n  }\n\n  async run(argv) {\n    const options = {\n      string: [\"remote\", \"to-remote\"],\n      boolean: [\"help\", \"version\", \"debug\"],\n      alias: {\n        r: \"remote\",\n        t: \"to-remote\",\n      },\n      default: {\n        remote: \"origin\",\n        toRemote: \"upstream\",\n      },\n    }\n\n    const args = parseArgs(argv, options)\n\n    this.debug = args.debug\n\n    if (args.version) {\n      this.log.info(`v${fullVersion}`)\n      return 0\n    }\n\n    let command = args._[0]\n\n    command = command ? command.toLowerCase() : \"help\"\n\n    const subCommand = args._[1]\n\n    switch (command) {\n      case \"pull-request\":\n      case \"prq\": // TODO: Make configurable\n        if (args.help && !subCommand) {\n          this.log.info(`Usage: ${this.toolName} pull-request <options>\n\nDescription:\n\nCreate a new pull request.\n\nOptions:\n--remote, -r <remote>     Remote to use as source. Default is 'origin'.\n--to-remote, -t <remote>  Remote to use as destination. Default is 'upstream'.\n`)\n          return 0\n        }\n\n        await this.pullRequest({\n          remoteName: args.remote,\n          upstreamRemoteName: args.toRemote,\n        })\n        break\n\n      case \"browse\":\n      case \"brw\": // TODO: Make configurable\n        if (args.help && !subCommand) {\n          this.log.info(`Usage: ${this.toolName} browse <options>\n\nDescription:\n\nBrowse to the current repository in your browser.\n\nOptions:\n  --remote, -r <remote>   Use the given remote. Default is 'origin'.\n`)\n          return 0\n        }\n\n        await this.browse(args.remote)\n\n        break\n\n      case \"help\":\n      default:\n        this.log.info(`\nBitbucket Tool\n\nUsage: ${this.toolName} <command> ...\n\nProvides simple command line GitHub and BitBucket integrations.\n\nCommands:\n  browse            Browse to a remote repository\n  pull-request      Create a new pull request from a forked repository\n\nGlobal Options:\n  --help                  Displays this help\n  --version               Displays tool version\n  --debug                 Show debug output\n`)\n        return 0\n    }\n\n    return 0\n  }\n}\n"],"file":"GitExtraTool.js"}