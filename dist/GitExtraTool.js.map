{"version":3,"sources":["../src/GitExtraTool.js"],"names":["streamToString","readable","stream","Readable","toString","Promise","resolve","reject","string","on","buffer","read","error","pipe","writeable","GitExtraTool","autobind","constructor","toolName","log","options","debug","ensureCommands","cmds","Set","newCmds","filter","cmd","has","exists","all","map","forEach","Error","add","getRemotes","result","childProcess","exec","output","stdout","re","RegExp","remotes","arr","name","url","groups","hostedGitInfo","fromUrl","noGitPlus","getBranch","branch","trim","browse","remoteName","remote","warning","committish","info","wait","pullRequest","upstreamRemoteName","originRemote","upstreamRemote","domain","user","project","quickStart","dirName","repoLocation","path","dirname","fs","existsSync","overwrite","remove","startSpinner","stopSpinner","join","cwd","customizeScript","readFile","encoding","message","fullDirName","qualifyPath","pathName","fullPathName","startsWith","runContext","vm","createContext","ui","prompts","promptArray","stopSpinnerNoMessage","safePrompts","prompt","type","validate","t","regex","test","response","restartSpinner","pascal","changeCase","pascalCase","fileName","writeFile","contents","move","fromFileName","toFileName","ensureFile","mkdir","mkdirp","pathNames","basename","ext","extname","git","forceAdd","Script","runInContext","run","argv","boolean","alias","r","default","toRemote","args","version","fullVersion","command","_","toLowerCase","subCommand","help"],"mappings":"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","sourcesContent":["import parseArgs from \"minimist\"\nimport { fullVersion } from \"./version\"\nimport autobind from \"autobind-decorator\"\nimport * as childProcess from \"promisify-child-process\"\nimport commandExists from \"command-exists\"\nimport stream from \"stream\"\nimport open from \"open\"\nimport hostedGitInfo from \"hosted-git-info\"\nimport fs from \"fs-extra\"\nimport path from \"path\"\nimport vm from \"vm\"\nimport * as changeCase from \"change-case\"\nimport prompts from \"prompts\"\n\nfunction streamToString(readable) {\n  if (!(readable instanceof stream.Readable)) {\n    return readable.toString()\n  }\n\n  return new Promise((resolve, reject) => {\n    let string = \"\"\n\n    readable.on(\"readable\", (buffer) => {\n      string += buffer.read().toString()\n    })\n\n    readable.on(\"end\", () => {\n      resolve(string)\n    })\n\n    readable.on(\"error\", (error) => {\n      reject(error)\n    })\n\n    readable.pipe(writeable)\n  })\n}\n\n@autobind\nexport class GitExtraTool {\n  constructor(toolName, log) {\n    const options = typeof toolName === \"object\" ? toolName : null\n\n    if (options) {\n      this.toolName = options.toolName\n      this.log = options.log\n      this.debug = options.debug\n    } else {\n      this.toolName = toolName\n      this.log = log\n    }\n  }\n\n  async ensureCommands(cmds) {\n    this.cmds = this.cmds || new Set()\n\n    const newCmds = cmds.filter((cmd) => !this.cmds.has(cmd))\n    const exists = await Promise.all(newCmds.map((cmd) => commandExists(cmd)))\n\n    newCmds.forEach((cmd) => {\n      if (!!exists[cmd]) {\n        throw new Error(`Command '${cmd}' does not exist. Please install it.`)\n      } else {\n        this.cmds.add(cmd)\n      }\n    })\n  }\n\n  async getRemotes() {\n    const result = await childProcess.exec(\"git remote -vv\")\n    const output = await streamToString(result.stdout)\n    const re = new RegExp(\n      \"^(?<name>[a-zA-Z0-9-]+)\\\\s+(?<url>.*)\\\\s+\\\\(fetch\\\\)$\",\n      \"gm\"\n    )\n    const remotes = {}\n    let arr = null\n\n    while ((arr = re.exec(output)) !== null) {\n      const { name, url } = arr.groups\n\n      remotes[name] = hostedGitInfo.fromUrl(url, { noGitPlus: true })\n    }\n\n    return remotes\n  }\n\n  async getBranch() {\n    const result = await childProcess.exec(\"git rev-parse --abbrev-ref HEAD\")\n    const branch = streamToString(result.stdout).trim()\n\n    if (branch === \"HEAD\") {\n      branch = \"master\"\n    }\n\n    return branch\n  }\n\n  async browse(remoteName) {\n    await this.ensureCommands([\"git\"])\n\n    const remotes = await this.getRemotes()\n    const branch = await this.getBranch()\n    const remote = remotes[remoteName]\n\n    if (!remote) {\n      this.log.warning(`No git remote '${remote}' was found`)\n      return\n    }\n\n    remote.committish = branch\n\n    const url = remote.browse(\"\")\n\n    this.log.info(`Opening '${url}'...`)\n\n    await open(url, { wait: false })\n  }\n\n  async pullRequest({ remoteName, upstreamRemoteName }) {\n    await this.ensureCommands([\"git\"])\n\n    const remotes = await this.getRemotes()\n    const branch = await this.getBranch()\n    const originRemote = remotes[remoteName]\n    const upstreamRemote = remotes[upstreamRemoteName]\n\n    if (!originRemote) {\n      throw new Error(`Remote '${remoteName}' was not found`)\n    }\n\n    if (!upstreamRemote) {\n      throw new Error(`Target remote '${upstreamRemoteName}' was not found`)\n    }\n\n    let url\n\n    if (originRemote.domain === \"github.com\") {\n      // On GitHub as of May 2020 you start a PR by do a compare operation from the upstream repository\n      url = `https://${upstreamRemote.domain}/${upstreamRemote.user}/${upstreamRemote.project}/compare/${branch}...${originRemote.user}:${branch}`\n    } else {\n      // On BitBucket as of May 2020 you start a PR by doing a compare operation from the origin or upstream repository\n      url = `https://${originRemote.domain}/${originRemote.user}/${originRemote.project}/pull-request/new`\n    }\n\n    this.log.info(`Opening '${url}'...`)\n    await open(url, { wait: false })\n  }\n\n  async quickStart(options) {\n    await this.ensureCommands([\"git\", \"node\"])\n\n    if (!options.url) {\n      throw new Error(\"A repository URL or directory must be given\")\n    }\n\n    const remote = hostedGitInfo.fromUrl(options.url, { noGitPlus: true })\n    let dirName\n    let repoLocation\n\n    if (remote) {\n      repoLocation = info.toString()\n      dirName = options.dirName || remote.project\n    } else {\n      repoLocation = options.url\n      dirName = options.dirName || path.dirname(repoLocation)\n    }\n\n    if (fs.existsSync(dirName)) {\n      if (options.overwrite) {\n        await fs.remove(dirName)\n      } else {\n        throw new Error(\n          `Directory ${dirName} already exists; use --overwrite flag to replace`\n        )\n      }\n    }\n\n    this.log.startSpinner(`Cloning ${repoLocation} into ${dirName}`)\n    await childProcess.exec(`git clone ${repoLocation} ${dirName}`)\n    this.log.stopSpinner()\n\n    this.log.startSpinner(`Resetting repository history`)\n    await fs.remove(path.join(dirName, \".git\"))\n    await childProcess.exec(`git init`, { cwd: dirName })\n    await childProcess.exec(`git add -A :/`, { cwd: dirName })\n    await childProcess.exec(`git commit -m 'Initial commit'`, { cwd: dirName })\n    this.log.stopSpinner()\n\n    let customizeScript\n\n    try {\n      customizeScript = await fs.readFile(\n        path.join(dirName, \"git-extra-customize.js\"),\n        {\n          encoding: \"utf8\",\n        }\n      )\n    } catch (error) {\n      // No customization script found\n      this.log.error(error.message)\n      return\n    }\n\n    // Full qualify dirName so we can more easily use it to ensure\n    // all customization script paths are under this directory.\n    const fullDirName = path.resolve(dirName)\n    const qualifyPath = (pathName) => {\n      const fullPathName = path.resolve(fullDirName, pathName)\n\n      if (!fullPathName.startsWith(fullDirName)) {\n        throw new Error(`Path ${pathName} not under ${dirName}`)\n      }\n\n      return fullPathName\n    }\n\n    this.log.startSpinner(\"Customizing project\")\n\n    const runContext = vm.createContext({\n      ui: {\n        prompts: async (promptArray) => {\n          this.log.stopSpinnerNoMessage()\n\n          const safePrompts = promptArray.map((prompt) => ({\n            type: \"text\",\n            name: prompt.name.toString(),\n            message: prompt.message.toString(),\n            validate: (t) => new RegExp(prompt.regex).test(t) || prompt.error,\n          }))\n\n          const response = await prompts(safePrompts)\n\n          this.log.restartSpinner()\n\n          return response\n        },\n      },\n      name: {\n        pascal: changeCase.pascalCase,\n      },\n      fs: {\n        readFile: async (fileName) =>\n          fs.readFile(qualifyPath(fileName), { encoding: \"utf8\" }),\n        writeFile: async (fileName, contents) =>\n          fs.writeFile(qualifyPath(fileName), contents),\n        remove: async (pathName) => fs.remove(qualifyPath(pathName)),\n        move: async (fromFileName, toFileName) =>\n          fs.move(qualifyPath(fromFileName), qualifyPath(toFileName)),\n        ensureFile: async (fileName) => fs.ensureFile(qualifyPath(fileName)),\n        mkdir: async (dirName) => fs.mkdirp(qualifyPath(dirName)),\n      },\n      path: {\n        join: (...pathNames) => path.join(...pathNames),\n        dirname: (pathName) => path.dirname(pathName),\n        basename: (pathName, ext) => path.basename(pathName, ext),\n        extname: (pathName) => path.extname(pathName),\n      },\n      git: {\n        forceAdd: async (fileName) =>\n          childProcess.exec(`git add -f ${qualifyPath(fileName)}`, {\n            cwd: dirName,\n          }),\n      },\n    })\n\n    try {\n      await new vm.Script(\n        \"(async () => {\" + customizeScript + \"\\n})()\"\n      ).runInContext(runContext)\n    } catch (error) {\n      this.log.stopSpinnerNoMessage()\n      if (this.debug) {\n        throw error\n      } else {\n        throw new Error(`Customization script error. ${error.message}`)\n      }\n    }\n\n    await fs.remove(path.join(dirName, \"git-extra-customize.js\"))\n    await childProcess.exec(\"git add -A :/\", { cwd: dirName })\n    await childProcess.exec(\"git commit -m 'After customization'\", {\n      cwd: dirName,\n    })\n\n    this.log.stopSpinner()\n  }\n\n  async run(argv) {\n    const options = {\n      string: [\"remote\", \"to-remote\"],\n      boolean: [\"help\", \"version\", \"debug\", \"overwrite\"],\n      alias: {\n        r: \"remote\",\n        t: \"to-remote\",\n      },\n      default: {\n        remote: \"origin\",\n        toRemote: \"upstream\",\n      },\n    }\n\n    const args = parseArgs(argv, options)\n\n    this.debug = args.debug\n\n    if (args.version) {\n      this.log.info(`v${fullVersion}`)\n      return 0\n    }\n\n    let command = args._[0]\n\n    command = command ? command.toLowerCase() : \"help\"\n\n    const subCommand = args._[1]\n\n    switch (command) {\n      case \"pull-request\":\n      case \"prq\": // TODO: Make configurable\n        if (args.help && !subCommand) {\n          this.log.info(`Usage: ${this.toolName} pull-request [<options>]\n\nDescription:\n\nCreate a new pull request.\n\nOptions:\n--remote, -r <remote>     Remote to use as source. Default is 'origin'.\n--to-remote, -t <remote>  Remote to use as destination. Default is 'upstream'.\n`)\n          return 0\n        }\n\n        await this.pullRequest({\n          remoteName: args.remote,\n          upstreamRemoteName: args.toRemote,\n        })\n        break\n\n      case \"browse\":\n      case \"brw\": // TODO: Make configurable\n        if (args.help && !subCommand) {\n          this.log.info(`Usage: ${this.toolName} browse [<options>]\n\nDescription:\n\nBrowse to the current repository in your browser.\n\nOptions:\n  --remote, -r <remote>   Use the given remote. Default is 'origin'.\n`)\n          return 0\n        }\n\n        await this.browse(args.remote)\n\n        break\n\n      case \"qst\":\n      case \"quick-start\":\n        if (args.help && !subCommand) {\n          this.log.info(\n            `Usage: ${this.toolName} quick-start [<options>] <repo> [<directory>]\n\nDescription:\n\nQuickly start a project by doing a bare clone of an existing repository, then\nrunning the 'git-extra-customize.js' customization script if there is one.\n`\n          )\n          return 0\n        }\n\n        await this.quickStart({\n          url: args._[1],\n          dirName: args._[2],\n          overwrite: args.overwrite,\n        })\n        break\n\n      case \"help\":\n      default:\n        this.log.info(`\nGit Extra Tool\n\nUsage: ${this.toolName} <command> ...\n\nProvides extra commands to support Git repos on GitHub, BitBucket and GitLab.\n\nCommands:\n  browse            Browse to a remote repository\n  pull-request      Create a new pull request from a forked repository\n  quick-start       Quickly start a new project from an existing repository\n\nGlobal Options:\n  --help                  Displays this help\n  --version               Displays tool version\n  --debug                 Show debug output\n`)\n        return 0\n    }\n\n    return 0\n  }\n}\n"],"file":"GitExtraTool.js"}